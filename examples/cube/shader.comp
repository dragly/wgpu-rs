#version 450

const uint LOCAL_SIZE = 1024;

layout (local_size_x = LOCAL_SIZE, local_size_y = 1, local_size_z = 1) in;
//layout (local_size_x = 8, local_size_y = 1, local_size_z = 1) in;
//layout (local_size_x = 9, local_size_y = 1, local_size_z = 1) in;

struct DrawArguments {
    uint index_count;
    uint instance_count;
    uint base_index;
    int vertex_offset;
    uint base_instance;
};

struct Instance {
    vec4 position;
    vec4 size;
    uint sector_id;
    uint sector_offset;
};

struct Sector {
    vec4 bbox_min;
    vec4 bbox_max;
    uint instance_count;
};

struct Visibility {
    uint visible;
    uint temp;
};

layout(set = 0, binding = 0) buffer PrimeIndices {
    DrawArguments[] indices;
}; // this is used as both input and output for convenience
layout(set = 0, binding = 1) buffer Instances {
    Instance[] instances;
};
layout(set = 0, binding = 2) buffer Visibilities {
    Visibility[] visibility;
};
layout(set = 0, binding = 3) buffer VisibleInstances {
    Instance[] visibleInstances;
};
layout(set = 0, binding = 4) buffer GroupSums {
    uint[] groupSums;
};
layout(set = 0, binding = 5) buffer Sectors {
    Sector[] sectors;
};

layout(set = 1, binding = 0) uniform Locals {
    mat4 u_Transform;
};
layout(set = 1, binding = 1) uniform texture2D t_Color;
//layout(set = 1, binding = 1) uniform sampler2D t_Color;
layout(set = 1, binding = 2) uniform sampler s_Color;

shared uint temp[LOCAL_SIZE];
shared uint vis[LOCAL_SIZE];

void main() {
    const uint global_sector_count = sectors.length();
    uint local_sector_count = LOCAL_SIZE;
    const uint global = gl_GlobalInvocationID.x;
    const uint local = gl_LocalInvocationID.x;
    const uint workGroup = gl_WorkGroupID.x;

    if (global < global_sector_count) {
        Sector sector = sectors[global];

        bool visible = false;
        for (int j = 0; j < 2; j++) {
            vec4 bbox_corner = (j == 0) ? sector.bbox_min : sector.bbox_max;
            vec4 position = vec4(bbox_corner.xyz, 1.0);
            position = u_Transform * position;
            position.xyz /= position.w;
            position.xy = clamp(position.xy, -1, 1);
            position.z = clamp(position.z, 0, 1);
            position.xy = position.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
            vec2 texCoord = vec2(position.x, position.y);
            vec4 tex = texture(sampler2D(t_Color, s_Color), texCoord);
            visible = visible || (position.z <= tex.r);
        }

        vis[local] = uint(visible);
        temp[local] = uint(visible) * sector.instance_count;
    } else {
        vis[local] = 0;
        temp[local] = 0;
    }

    int o = 1;
    for (uint d = local_sector_count / 2; d > 0; d /= 2) {
        barrier();
        memoryBarrierShared();

        if (local < d) {
            int ai = o * (2 * int(local) + 1) - 1;
            int bi = o * (2 * int(local) + 2) - 1;
            temp[bi] += temp[ai];
        }
        o *= 2;
    }

    barrier();
    memoryBarrierShared();

    if (local == 0) {
        // After the first pass, the last element contains the instance count,
        // but we need to zero it out for the second pass.
        uint lastNumber = temp[local_sector_count - 1];
        groupSums[workGroup] = lastNumber;
        temp[local_sector_count - 1] = 0;
    }

    for (int d = 1; d < local_sector_count; d *= 2) {
        barrier();
        memoryBarrierShared();
        o /= 2;
        if (local < d) {
            int ai = o * (2 * int(local) + 1) - 1;
            int bi = o * (2 * int(local) + 2) - 1;
            uint t = temp[ai];
            temp[ai] = temp[bi];
            temp[bi] += t;
        }
    }

    barrier();
    memoryBarrierShared();

    if (global < global_sector_count) {
        visibility[global].visible = vis[local];
        visibility[global].temp = temp[local];
    }
}
